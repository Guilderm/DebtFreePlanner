steps:
  # Step 0: Install dependencies and build the project
  - name: "node:22"
    id: "Install Dependencies and Build"
    entrypoint: bash
    args:
      - "-c"
      - |
        echo "==== Step 0: Install Dependencies and Build ===="

        echo "Initial workspace directory structure:"
        ls -R .

        # Install pnpm globally
        echo "Installing pnpm..."
        npm install -g pnpm || { echo "Failed to install pnpm";}

        # Install dependencies for @debtfreeplanner/pwa-client
        echo "Installing dependencies for @debtfreeplanner/pwa-client..."
        pnpm --filter @debtfreeplanner/pwa-client install --frozen-lockfile || { echo "Failed to install dependencies";}

        # Build the project
        echo "Building the project..."
        pnpm --filter @debtfreeplanner/pwa-client run build || { echo "Build failed";}

        # Validate build output
        if [ ! -f apps/pwa-client/.output/server/index.mjs ]; then
          echo "Build output is incomplete: .output/server/index.mjs not found"
          exit 1
        fi

        # Prune unnecessary files in .output directory
        echo "Pruning unnecessary files from .output directory..."
        find apps/pwa-client/.output -type f \( -name '*.map' -o -name '*.log' \) -delete || { echo "Failed to prune unnecessary files";}

        # Ensure only server files are included
        echo "Removing unnecessary directories from .output..."
        rm -rf apps/pwa-client/.output/public || { echo "Failed to remove .output/public";}
        rm -rf apps/pwa-client/.output/client || { echo "Failed to remove .output/client";}
        rm -rf apps/pwa-client/.output/.nuxt || { echo "Failed to remove .output/.nuxt";}

        # Copy necessary files to the root for deployment
        echo "Copying app.yaml to /workspace..."
        cp apps/pwa-client/app.yaml ./ || { echo "Failed to copy app.yaml";}

        echo "Copying .output/server directory to /workspace..."
        cp -r apps/pwa-client/.output/server ./ || { echo "Failed to copy .output/server directory";}

        echo "Copying package.json and pnpm-lock.yaml to /workspace..."
        cp apps/pwa-client/package.json ./ || { echo "Failed to copy package.json";}
        cp apps/pwa-client/pnpm-lock.yaml ./ || { echo "Failed to copy pnpm-lock.yaml";}

        echo "Final workspace directory structure:"
        ls -R .

  # Step 1: Deploy the application to App Engine
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy Application"
    entrypoint: bash
    args:
      - "-c"
      - |
        echo "==== Step 1: Deploying Application ===="
        gcloud app deploy app.yaml --quiet --verbosity=debug --stop-previous-version

options:
  logging: CLOUD_LOGGING_ONLY
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET

timeout: "1200s"

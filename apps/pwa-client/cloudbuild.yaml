steps:
  # Step 0: Install dependencies and build the project
  - name: "node:22"
    id: "Install Dependencies and Build"
    entrypoint: bash
    args:
      - "-c"
      - |
        set -e  # Exit immediately if a command exits with a non-zero status
        echo "==== Step 0: Install Dependencies and Build ===="

        echo "Initial workspace directory structure:"
        ls -R .

        # Install pnpm globally
        echo "Installing pnpm..."
        npm install -g pnpm

        # Install dependencies for @debtfreeplanner/pwa-client
        echo "Installing dependencies for @debtfreeplanner/pwa-client..."
        pnpm --filter @debtfreeplanner/pwa-client install --frozen-lockfile

        # Build the project
        echo "Building the project..."
        pnpm --filter @debtfreeplanner/pwa-client run build

        # Validate build output
        if [ ! -f apps/pwa-client/.output/server/index.mjs ]; then
          echo "Build output is incomplete: .output/server/index.mjs not found"
          exit 1
        fi

        # Prune unnecessary files from the .output directory
        echo "Pruning unnecessary files from .output directory..."
        find apps/pwa-client/.output -type f -name '*.map' -delete
        find apps/pwa-client/.output -type f -name '*.ts' -delete
        find apps/pwa-client/.output -type f -name '*.json' -delete -not -name 'package.json'

        # Prepare deployment directory
        echo "Preparing deployment directory..."
        mkdir deployment
        cp apps/pwa-client/app.yaml deployment/
        cp -r apps/pwa-client/.output deployment/
        cp apps/pwa-client/package.json deployment/
        cp apps/pwa-client/pnpm-lock.yaml deployment/

        # Create .gcloudignore in deployment directory
        echo "Creating .gcloudignore in deployment directory..."
        cat > deployment/.gcloudignore <<EOL
# Ignore everything by default
**

# Include only the necessary files for deployment
!app.yaml
!.output/**
!package.json
!pnpm-lock.yaml
EOL

        echo "Deployment directory contents:"
        ls -R deployment/

        # Count the number of files to be deployed
        echo "Counting files to be deployed..."
        FILE_COUNT=$(find deployment -type f | wc -l)
        echo "Total files to be deployed: $FILE_COUNT"

        if [ "$FILE_COUNT" -gt 9999 ]; then
          echo "Error: The deployment contains more than 10,000 files."
          exit 1
        fi

  # Step 1: Deploy the application to App Engine
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "Deploy Application"
    entrypoint: bash
    args:
      - "-c"
      - |
        set -e
        echo "==== Step 1: Deploying Application ===="
        cd deployment
        gcloud app deploy app.yaml --quiet --verbosity=debug --stop-previous-version

options:
  logging: CLOUD_LOGGING_ONLY
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET

timeout: "1200s"
